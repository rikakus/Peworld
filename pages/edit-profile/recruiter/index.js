import Head from "next/head";
import Image from "next/image";
import styles from "../../../styles/RecruiterEdit.module.css";
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useRouter } from "next/router";
import Swal from "sweetalert2";

export async function getServerSideProps(context) {
  const token = context.req.cookies.token;
  const user = context.req.cookies.users;
  const api1 = async () => {
    try {
      const res = await axios({
        method: "get",
        url: `${process.env.HOST}/recruiter/${user}`,
        headers: { token: token },
      });
      return {
        data: res.data,
        error: false,
      };
    } catch (error) {
      return {
        data: [],
        error: true,
      };
    }
  };
  return {
    props: {
      data: token,
      api1: await api1(),
    },
  };
}

function EditProfile(props) {
  const router = useRouter();
  const data1 = props.api1.data.data;
  const [photo, setPhoto] = useState(data1.photo);
  const [isChangePhoto, setIsChangePhoto] = useState(false);

  const [form, setForm] = useState({
    nameUser: data1.name_user,
    nameCompany: data1.name_company,
    position: data1.position,
    phone: data1.phone,
    businessFields: data1.business_fields,
    city: data1.city,
    desc: data1.description,
    instagram: data1.instagram,
    linkedin: data1.linkedin,
    email: data1.email_company,
    photo: data1.photo,
  });

  const SubmitData = async () => {
    axios
      .put(`${process.env.HOST}/recruiter/${data1.id}`, form)
      .then((response) => {
        Swal.fire(response.data.message, "", "success");

        return router.push("/profile/recruiter");
      })
      .catch((err) => {
        Swal.fire(err.response.data.message, err.response.data.error, "error");
      });
  };

  const getData = async () => {
    const token = props.data;
    axios
      .get(`${process.env.HOST}/recruiter/${data1.login_id}`, {
        headers: { token },
      })
      .then((response) => {
        setForm({
          nameUser: response.data.data.name_user,
          nameCompany: response.data.data.name_company,
          position: response.data.data.position,
          phone: response.data.data.phone,
          businessFields: response.data.data.business_fields,
          city: response.data.data.city,
          desc: response.data.data.description,
          instagram: response.data.data.instagram,
          linkedin: response.data.data.linkedin,
          email: response.data.data.email_company,
          photo: response.data.data.photo,
        });
      })
      .catch((err) => {
        Swal.fire(err.response.data.message, err.response.data.error, "error");
      });
  };

  const cancel = () => {
    // setForm({
    //   nameUser: data1.name_user,
    //   nameCompany: data1.name_company,
    //   position: data1.position,
    //   phone: data1.phone,
    //   businessFields: data1.business_fields,
    //   city: data1.city,
    //   desc: data1.description,
    //   instagram: data1.instagram,
    //   linkedin: data1.linkedin,
    //   email: data1.email_company,
    //   photo: data1.photo,
    // });
    return router.push("/profile/recruiter");
  };

  const handleChangeImage = async () => {
    const formData = new FormData();
    formData.append("photo", photo);

    axios
      .put(`${process.env.HOST}/recruiter/${data1.id}/photo`, formData)
      .then((response) => {
        Swal.fire(response.data.message, "", "success");
        window.location.reload();
        return getData();
      })
      .catch((err) => {
        Swal.fire(err.response.data.message, err.response.data.error, "error");
      });
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.hero}>
        <div className={styles.background}>
          <div className={styles.container}>
            <div className={styles.user}>
              <div className={styles.profile}>
                <div className={styles.image}>
                  <Image
                    src={`${process.env.HOST}/${
                      form.photo ? form.photo : "profile.jpg"
                    }`}
                    style={{ borderRadius: "50%" }}
                    width={200}
                    height={200}
                    layout="fixed"
                    alt="gambar"
                  ></Image>
                </div>
                <label className={styles.select} htmlFor="files">
                  Pilih Foto
                </label>
                <input
                  className="hidden"
                  hidden
                  type="file"
                  id="files"
                  onChange={(e) => {
                    setPhoto(e.target.files[0]);
                    setIsChangePhoto(true);
                  }}
                />
                {isChangePhoto && (
                  <button
                    onClick={handleChangeImage}
                    type="submit"
                    className={styles.select}
                  >
                    Simpan Foto
                  </button>
                )}
                <h3 className={styles.name}>{form.nameCompany}</h3>
                <h6 className={styles.job}>{form.businessFields}</h6>
                <div className={styles.formLocation}>
                  <div className={styles.location}></div>
                  <p className={styles.desc}>{form.city}</p>
                </div>
              </div>
              <button
                type="submit"
                className={styles.button}
                onClick={SubmitData}
              >
                Simpan
              </button>
              <button className={styles.button2} onClick={() => cancel()}>
                Batal
              </button>
            </div>
            <div className={styles.formContent}>
              <div className={styles.content}>
                <div className={styles.cover}>
                  <h3>Data Diri</h3>
                </div>
                <div className={styles.line}></div>
                <div className={styles.formInput}>
                  <div className={styles.title}>Nama Perusahaan</div>
                  <input
                    type="text"
                    className={styles.input}
                    placeholder="  Masukan nama perusahaan"
                    value={form.nameCompany}
                    onChange={(e) =>
                      setForm({ ...form, nameCompany: e.target.value })
                    }
                  />
                </div>
                <div className={styles.formInput}>
                  <div className={styles.title}>Bidang</div>
                  <input
                    type="text"
                    className={styles.input}
                    placeholder="  Masukan bidang perusahaan ex : Financial"
                    value={form.businessFields}
                    onChange={(e) =>
                      setForm({ ...form, businessFields: e.target.value })
                    }
                  />
                </div>
                <div className={styles.formInput}>
                  <div className={styles.title}>kota</div>
                  <input
                    type="text"
                    className={styles.input}
                    placeholder="  Masukan kota"
                    value={form.city}
                    onChange={(e) => setForm({ ...form, city: e.target.value })}
                  />
                </div>
                <div className={styles.formInputDesc}>
                  <div className={styles.title}>Deskripsi Singkat</div>
                  <textarea
                    type="text"
                    className={styles.inputDesc}
                    placeholder="  Tuliskan deskripsi singkat"
                    value={form.desc}
                    onChange={(e) => setForm({ ...form, desc: e.target.value })}
                  />
                </div>
                <div className={styles.formInput}>
                  <div className={styles.title}>Email</div>
                  <input
                    type="text"
                    className={styles.input}
                    placeholder="  Masukan email"
                    value={form.email}
                    onChange={(e) =>
                      setForm({ ...form, email: e.target.value })
                    }
                  />
                </div>
                <div className={styles.formInput}>
                  <div className={styles.title}>Instagram</div>
                  <input
                    type="text"
                    className={styles.input}
                    placeholder="  Masukan nama instagram"
                    value={form.instagram}
                    onChange={(e) =>
                      setForm({ ...form, instagram: e.target.value })
                    }
                  />
                </div>
                <div className={styles.formInput}>
                  <div className={styles.title}>Nomor Telepon</div>
                  <input
                    type="text"
                    className={styles.input}
                    placeholder="  Masukan nomor telepon"
                    value={form.phone}
                    onChange={(e) =>
                      setForm({ ...form, phone: e.target.value })
                    }
                  />
                </div>
                <div className={styles.formInput}>
                  <div className={styles.title}>Linkedin</div>
                  <input
                    type="text"
                    className={styles.input}
                    placeholder="  Masukan nama linkedin"
                    value={form.linkedin}
                    onChange={(e) =>
                      setForm({ ...form, linkedin: e.target.value })
                    }
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

EditProfile.layout = "L1";

export default EditProfile;
